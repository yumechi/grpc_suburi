// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// PekoraClient is the client API for Pekora service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PekoraClient interface {
	IdolGreeting(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetReply, error)
}

type pekoraClient struct {
	cc grpc.ClientConnInterface
}

func NewPekoraClient(cc grpc.ClientConnInterface) PekoraClient {
	return &pekoraClient{cc}
}

func (c *pekoraClient) IdolGreeting(ctx context.Context, in *GreetRequest, opts ...grpc.CallOption) (*GreetReply, error) {
	out := new(GreetReply)
	err := c.cc.Invoke(ctx, "/konpeko.Pekora/IdolGreeting", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PekoraServer is the server API for Pekora service.
// All implementations must embed UnimplementedPekoraServer
// for forward compatibility
type PekoraServer interface {
	IdolGreeting(context.Context, *GreetRequest) (*GreetReply, error)
	mustEmbedUnimplementedPekoraServer()
}

// UnimplementedPekoraServer must be embedded to have forward compatible implementations.
type UnimplementedPekoraServer struct {
}

func (UnimplementedPekoraServer) IdolGreeting(context.Context, *GreetRequest) (*GreetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IdolGreeting not implemented")
}
func (UnimplementedPekoraServer) mustEmbedUnimplementedPekoraServer() {}

// UnsafePekoraServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PekoraServer will
// result in compilation errors.
type UnsafePekoraServer interface {
	mustEmbedUnimplementedPekoraServer()
}

func RegisterPekoraServer(s grpc.ServiceRegistrar, srv PekoraServer) {
	s.RegisterService(&_Pekora_serviceDesc, srv)
}

func _Pekora_IdolGreeting_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PekoraServer).IdolGreeting(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/konpeko.Pekora/IdolGreeting",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PekoraServer).IdolGreeting(ctx, req.(*GreetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Pekora_serviceDesc = grpc.ServiceDesc{
	ServiceName: "konpeko.Pekora",
	HandlerType: (*PekoraServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "IdolGreeting",
			Handler:    _Pekora_IdolGreeting_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/konpeko.proto",
}
